package LinearRegression;

import Jama.Matrix;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Simple Linear Regression implementation
 */
public class LinearRegression {

    public static final double alpha = 0.001; // Learning rate alpha
    /*** Fill in other  constant variables here***/
    
    public static void linearRegression() throws Exception {
        Matrix trainingData = MatrixData.getDataMatrix("data\\linear_regression\\linear-regression-train.csv");
        // getMatrix(Initial row index, Final row index, Initial column index, Final column index)
        Matrix train_x = trainingData.getMatrix(0, trainingData.getRowDimension() - 1, 0, trainingData.getColumnDimension() - 2);
        Matrix train_y = trainingData.getMatrix(0, trainingData.getRowDimension()-1, trainingData.getColumnDimension()-1, trainingData.getColumnDimension()-1);

        Matrix testData = MatrixData.getDataMatrix("data\\linear_regression\\linear-regression-test.csv");
        Matrix test_x = testData.getMatrix(0, testData.getRowDimension() - 1, 0, testData.getColumnDimension() - 2);

        /* Linear Regression */
        /* 2 step process */
        // 1) find beta
        Matrix beta = getBeta(train_x, train_y);
        // 2) predict y for test data using beta calculated from train data
        Matrix predictedY = test_x.times(beta);

        // Output
        printOutput(predictedY);
    }

    /**  @params: X and Y matrix of training data
     * returns value of beta calculated using (1) the formula beta = (X^T*X)^ -1)*(X^T*Y)
     */
    private static Matrix getBeta(Matrix trainX, Matrix trainY) {
    	Matrix m=null;
    	return m;
    	/****************Please Fill Missing Lines Here*****************/
    }

    /**  @params: X and Y matrix of training data
     * returns value of beta calculated using (2) batch gradient descent
     */
    private static Matrix getBetaBatchGradient(Matrix trainX, Matrix trainY) {
    
    	/****************Please Fill Missing Lines Here*****************/
    }

    /**  @params: X and Y matrix of training data
     * returns value of beta calculated using (3) stochastic gradient descent
     */
    private static Matrix getBetaStochasticGradient(Matrix trainX, Matrix trainY) {
    
    	/****************Please Fill Missing Lines Here*****************/
    }

    /**
     * @params: predicted Y matrix
     * outputs the predicted y values to the text file named "linear-regression-output"
     */
    public static void printOutput(Matrix predictedY) throws IOException {
        FileWriter fStream = new FileWriter("output\\linear_regression\\linear-regression-output.txt");     // Output File
        BufferedWriter out = new BufferedWriter(fStream);
        for (int row =0; row<predictedY.getRowDimension(); row++) {
            out.write(String.valueOf(predictedY.get(row, 0)));
            out.newLine();
        }
        out.close();
    }
}
